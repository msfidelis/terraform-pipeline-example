name: Terraform - Continuous Integration

on:
  push:
    branches:
      - 'feature/**'
      - 'hotfix/**'
      - 'bug/**'

env:
  TF_ROOT:        './terraform'
  PROJECT_NAME:   'foo'
  STAGE:          'dev'
  AWS_REGION:     'us-east-1'
  AWS_ACCOUNT_ID: '181560427716'

jobs:
  terraform-continous-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION}}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID}}:role/github-actions-role
          role-duration-seconds: 3600
          # role-session-name: GitHubActions

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.3'

      - name: Configuring S3 bucket and State
        id: create-s3-bucket
        run: |
          BUCKET_NAME=${{ env.PROJECT_NAME}}-${{ env.AWS_REGION}}-${{ env.AWS_ACCOUNT_ID}}-tfstates
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket already exists"
          else
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region ${{ env.AWS_REGION }}
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
            echo "Bucket created"
          fi
          echo "::set-output name=bucket_name::$BUCKET_NAME"

      - name: Terraform Init
        working-directory: ${{ env.TF_ROOT }}
        run: |
          terraform init -backend-config="bucket=${{ steps.create-s3-bucket.outputs.bucket_name }}" -backend-config="key=${{ env.PROJECT_NAME }}/${{ env.STAGE }}/terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_ROOT }}

      - name: Terraform Format
        run: terraform fmt --recursive --check
        working-directory: ${{ env.TF_ROOT }}


  terraform-plan:
    needs: terraform-continous-integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION}}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID}}:role/github-actions-role
          role-duration-seconds: 3600        

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.3'

      - name: Terraform Init
        working-directory: ${{ env.TF_ROOT }}
        run: |
          terraform init -backend-config="bucket=${{ steps.create-s3-bucket.outputs.bucket_name }}" -backend-config="key=${{ env.PROJECT_NAME }}/${{ env.STAGE }}/terraform.tfstate"

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var-file=./environments/${{ env.STAGE }}/terraform.tfvars‚Äù
        working-directory: ${{ env.TF_ROOT }}

  open-pr-to-develop:
    if: success()
    needs: terraform-plan
    runs-on: ubuntu-latest
    steps:
      - name: Create Pull Request to Develop
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Feature implementation"
          title: "PR from ${GITHUB_REF##*/} to Develop"
          body: |
            - Auto-generated PR to merge changes from ${GITHUB_REF##*/} to develop
          base: develop
          branch: ${{ github.head_ref }}